#!/bin/bash

#############################################
#NOTES
# This script takes inspiration from Chetan Surpur's blog post http://chetansurpur.com/blog/2010/11/magic-work-cycle.html
# Earlier, I used http://www.magicworkcycle.com/ but the slowness of my intertubes connection (the bell sound was getting stretched) led me to yearn for an offline equivalent.

# Quick thanks to http://linuxhelp.blogspot.com/2005/10/10-seconds-guide-to-bash-shell.html
# I plan to add neatness with tput: http://www.ibm.com/developerworks/aix/library/au-learningtput/index.html
# Maybe ncurses?!

# Also, must add in future: ASCII graphic of an Elvin Gerbil solemnly dancing the mazurka during play time, and coding during work time.

#Thanks to Manoj Mardithaya for suggesting the purple functionality.

#############################################
#VALUES TO BE CHANGED DURING TESTS
def30=30
def60=60
#############################################
#GLOBAL VARIABLES
args=$*
pur=0
#############################################
#FUNCTIONS
function usage
{
    echo 'Usage: 30slash30 [-purple] [WORKMINUTES PLAYMINUTES] X' > /dev/stderr
    echo 'Where X is 1 if you want to play first, and not 1 if you want to work first.' > /dev/stderr
    echo 'Set attribute -purple if you want your Purple status changed.' > /dev/stderr
    exit 1
}

function err_exit
{
    echo "Error! Wrong syntax." > /dev/stderr
    usage
    exit 1
}

function countdown
{
    if [ $pur -eq 1 ]
	then
        purple-remote "setstatus?status=$3"
	fi
	
    i=$1
	while [ $i -ge 0 ]
	do
		j=$SECINMIN
		while [ $j -ge 0 ]
		do
			echo $2
			echo $i ':' $j
			sleep 1
			j=`expr $j - 1`
			clear
		done
		i=`expr $i - 1`
	done
	cvlc /usr/share/sounds/ubuntu/stereo/phone-outgoing-busy.ogg 2> /dev/null &
}

function set_vals
{
    S0=$1
    S1=$2
    if [ $pur -eq 1 ]
    then
        purmsg0=$3
        purmsg1=$4
    fi
}
#############################################
#CODE
if [ $# -eq 4 ] #30slash30 -purple WORK PLAY X
then
    if [[ $args = *-purple* ]]
    then
        pur=1
        S0MIN=$2
        S1MIN=$3
        ch=$4
    else
            err_exit
    fi
elif [ $# -eq 3 ] #30slash30 WORK PLAY X
then
	S0MIN=$1
	S1MIN=$2
	ch=$3
elif [ $# -eq 2 ] #30slash30 -purple X
then
    if [[ $args = *-purple* ]]
    then
        pur=1
        S0MIN=$def30
        S1MIN=$def30
        ch=$2
    else
            err_exit
    fi
elif [ $# -eq 1 ] #30slash30 X
then
    if ! [ "$args" -eq "$args" 2> /dev/null ]
    then
        err_exit
    else
	    S0MIN=$def30
	    S1MIN=$def30
	    ch=$1
    fi
else
   	usage
fi

#############################################

	S0MIN=`expr $S0MIN - 1`
	S1MIN=`expr $S1MIN - 1`
	SECINMIN=`expr $def60 - 1`
	
	if [ $ch -eq 1 ]
	then
		set_vals 'Play' 'Work' 'available' 'unavailable'
		fi
	else
		set_vals 'Work' 'Play' 'unavailable' 'available'
		fi
	fi

	clear
	
	while [ 1 ]
	do
	    countdown $S0MIN $S0 $purmsg0
		
		countdown $S1MIN $S1 $purmsg1
	done
fi
